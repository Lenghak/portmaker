#!/bin/sh

# Modern pre-commit hook with enhanced color support and status indicators
# Uses modern shell scripting techniques for better reliability

set -euo pipefail

# Modern color detection using tput
has_color_support() {
    # Check if we're in an interactive terminal
    [ -t 1 ] || return 1
    
    # Check if terminal supports colors (modern approach)
    ncolors=$(tput colors 2>/dev/null || echo 0)
    [ "$ncolors" -ge 8 ]
}

# Initialize colors with modern ANSI codes
if has_color_support; then
    # Modern color codes with better compatibility
    RED='\033[0;31m'
    GREEN='\033[0;32m'
    YELLOW='\033[1;33m'
    BLUE='\033[0;34m'
    PURPLE='\033[0;35m'
    CYAN='\033[0;36m'
    WHITE='\033[1;37m'
    BOLD='\033[1m'
    DIM='\033[2m'
    NC='\033[0m' # No Color
    
    # Status indicators
    CHECKMARK="${GREEN}✓${NC}"
    CROSS="${RED}✗${NC}"
    ARROW="${CYAN}→${NC}"
    INFO="${BLUE}ℹ${NC}"
    WARNING="${YELLOW}⚠${NC}"
else
    # Fallback for non-color terminals
    RED=''; GREEN=''; YELLOW=''; BLUE=''; PURPLE=''; CYAN=''; WHITE=''; BOLD=''; DIM=''; NC=''
    CHECKMARK="[OK]"; CROSS="[ERROR]"; ARROW="->"; INFO="[INFO]"; WARNING="[WARN]"
fi

# Modern print function with status indicators
print_status() {
    local status="$1"
    local color="$2"
    local message="$3"
    printf "%b %b%s%b\n" "$status" "$color" "$message" "$NC"
}

print_header() {
    local message="$1"
    printf "\n%b%s%b\n" "$BOLD$CYAN" "$message" "$NC"
}

print_section() {
    local message="$1"
    printf "%b %s%b\n" "$ARROW$WHITE" "$message" "$NC"
}

# Main execution
print_header "Pre-commit Hook Starting"
print_section "Running Ultracite formatter..."

# Start timing with modern date command
START_TIME=$(date +%s.%N)

# Run Ultracite format with proper error handling
if npx ultracite format; then
    END_TIME=$(date +%s.%N)
    DURATION=$(echo "$END_TIME - $START_TIME" | bc -l 2>/dev/null || echo "unknown")
    
    print_status "$CHECKMARK" "$GREEN" "Code formatting completed successfully!"
    print_status "$CHECKMARK" "$GREEN" "All files are now properly formatted"
    print_section "Formatting took ${DURATION} seconds"
    
    # Count formatted files with modern git command
    STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | wc -l | tr -d ' ')
    if [ "$STAGED_FILES" -gt 0 ]; then
        print_status "$INFO" "$PURPLE" "Formatted $STAGED_FILES staged file(s)"
    fi
    
    print_status "$CHECKMARK" "$GREEN" "Pre-commit hook completed successfully!"
    printf "\n"
    exit 0
else
    END_TIME=$(date +%s.%N)
    DURATION=$(echo "$END_TIME - $START_TIME" | bc -l 2>/dev/null || echo "unknown")
    
    print_status "$CROSS" "$RED" "Code formatting failed!"
    print_status "$WARNING" "$YELLOW" "Please fix the formatting issues and try again"
    print_section "Process took ${DURATION} seconds"
    printf "\n"
    print_status "$INFO" "$YELLOW" "Tip: Run 'pnpm format' to see detailed formatting issues"
    print_status "$INFO" "$YELLOW" "Tip: Run 'pnpm format:unsafe' to apply more aggressive fixes"
    printf "\n"
    exit 1
fi