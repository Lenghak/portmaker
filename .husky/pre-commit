set -euo pipefail

# Modern color detection using tput
has_color_support() {
    # Check if we're in an interactive terminal
    [ -t 1 ] || return 1
    
    # Check if terminal supports colors (modern approach)
    ncolors=$(tput colors 2>/dev/null || echo 0)
    [ "$ncolors" -ge 8 ]
}

# Initialize colors with modern ANSI codes
if has_color_support; then
    # Modern color codes with better compatibility
    RED='\033[0;31m'
    GREEN='\033[0;32m'
    YELLOW='\033[1;33m'
    BLUE='\033[0;34m'
    PURPLE='\033[0;35m'
    CYAN='\033[0;36m'
    WHITE='\033[1;37m'
    BOLD='\033[1m'
    DIM='\033[2m'
    NC='\033[0m' # No Color
    
    # Status indicators
    CHECKMARK="${GREEN}✓${NC}"
    CROSS="${RED}✗${NC}"
    ARROW="${CYAN}→${NC}"
    INFO="${BLUE}ℹ${NC}"
    WARNING="${YELLOW}⚠${NC}"
else
    # Fallback for non-color terminals
    RED=''; GREEN=''; YELLOW=''; BLUE=''; PURPLE=''; CYAN=''; WHITE=''; BOLD=''; DIM=''; NC=''
    CHECKMARK="[OK]"; CROSS="[ERROR]"; ARROW="->"; INFO="[INFO]"; WARNING="[WARN]"
fi

# Modern print function with status indicators
print_status() {
    local status="$1"
    local color="$2"
    local message="$3"
    printf "%b %b%s%b\n" "$status" "$color" "$message" "$NC"
}

print_header() {
    local message="$1"
    printf "\n%b%s%b\n" "$BOLD$CYAN" "$message" "$NC"
}

print_section() {
    local message="$1"
    printf "%b %s%b\n" "$ARROW$WHITE" "$message" "$NC"
}

# Main execution
print_header "Pre-commit Hook Starting"

# Start timing with modern date command
START_TIME=$(date +%s.%N)

# Get staged files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM)

# Check if we have any staged files
if [ -z "$STAGED_FILES" ]; then
    print_status "$INFO" "$PURPLE" "No staged files to process"
    print_status "$CHECKMARK" "$GREEN" "Pre-commit hook completed successfully!"
    exit 0
fi

# Count files by type (handle empty results gracefully)
ASTRO_VUE_SVELTE_FILES=$(echo "$STAGED_FILES" | grep -E '\.(astro|vue|svelte)$' 2>/dev/null | wc -l | tr -d ' ' || echo "0")
OTHER_FILES=$(echo "$STAGED_FILES" | grep -E '\.(js|jsx|ts|tsx|json|jsonc|css|scss|md|mdx)$' 2>/dev/null | wc -l | tr -d ' ' || echo "0")

print_section "Found $ASTRO_VUE_SVELTE_FILES Astro/Vue/Svelte files and $OTHER_FILES other files"

# Step 1: Run Prettier for Astro, Vue, and Svelte files
if [ "$ASTRO_VUE_SVELTE_FILES" -gt 0 ]; then
    print_section "Step 1: Running Prettier for Astro/Vue/Svelte files..."
    PRETTIER_START=$(date +%s.%N)
    
    # Get the list of Astro/Vue/Svelte files
    ASTRO_VUE_SVELTE_FILE_LIST=$(echo "$STAGED_FILES" | grep -E '\.(astro|vue|svelte)$' 2>/dev/null || true)
    
    if [ -n "$ASTRO_VUE_SVELTE_FILE_LIST" ]; then
        if npx prettier --write $ASTRO_VUE_SVELTE_FILE_LIST; then
            PRETTIER_END=$(date +%s.%N)
            PRETTIER_DURATION=$(echo "$PRETTIER_END - $PRETTIER_START" | bc -l 2>/dev/null || echo "unknown")
            print_status "$CHECKMARK" "$GREEN" "Prettier formatting completed successfully!"
            print_section "Prettier took ${PRETTIER_DURATION} seconds"
        else
            PRETTIER_END=$(date +%s.%N)
            PRETTIER_DURATION=$(echo "$PRETTIER_END - $PRETTIER_START" | bc -l 2>/dev/null || echo "unknown")
            print_status "$CROSS" "$RED" "Prettier formatting failed!"
            print_section "Prettier took ${PRETTIER_DURATION} seconds"
            exit 1
        fi
    else
        print_section "Step 1: No Astro/Vue/Svelte files found to format"
    fi
else
    print_section "Step 1: Skipping Prettier (no Astro/Vue/Svelte files)"
fi

# Step 2: Run Ultracite for other files
if [ "$OTHER_FILES" -gt 0 ]; then
    print_section "Step 2: Running Ultracite for other files..."
    ULTRACITE_START=$(date +%s.%N)
    
    if npx ultracite format; then
        ULTRACITE_END=$(date +%s.%N)
        ULTRACITE_DURATION=$(echo "$ULTRACITE_END - $ULTRACITE_START" | bc -l 2>/dev/null || echo "unknown")
        print_status "$CHECKMARK" "$GREEN" "Ultracite formatting completed successfully!"
        print_section "Ultracite took ${ULTRACITE_DURATION} seconds"
    else
        ULTRACITE_END=$(date +%s.%N)
        ULTRACITE_DURATION=$(echo "$ULTRACITE_END - $ULTRACITE_START" | bc -l 2>/dev/null || echo "unknown")
        print_status "$CROSS" "$RED" "Ultracite formatting failed!"
        print_section "Ultracite took ${ULTRACITE_DURATION} seconds"
        print_status "$WARNING" "$YELLOW" "Please fix the formatting issues and try again"
        printf "\n"
        print_status "$INFO" "$YELLOW" "Tip: Run 'pnpm format' to see detailed formatting issues"
        print_status "$INFO" "$YELLOW" "Tip: Run 'pnpm format:unsafe' to apply more aggressive fixes"
        printf "\n"
        exit 1
    fi
else
    print_section "Step 2: Skipping Ultracite (no other files)"
fi

# Final timing
END_TIME=$(date +%s.%N)
TOTAL_DURATION=$(echo "$END_TIME - $START_TIME" | bc -l 2>/dev/null || echo "unknown")

print_status "$CHECKMARK" "$GREEN" "All formatting completed successfully!"
print_section "Total time: ${TOTAL_DURATION} seconds"

# Count total formatted files (use expr for safer arithmetic)
TOTAL_FILES=$(expr "$ASTRO_VUE_SVELTE_FILES" + "$OTHER_FILES" 2>/dev/null || echo "0")
if [ "$TOTAL_FILES" -gt 0 ] 2>/dev/null; then
    print_status "$INFO" "$PURPLE" "Formatted $TOTAL_FILES staged file(s)"
fi

print_status "$CHECKMARK" "$GREEN" "Pre-commit hook completed successfully!"
printf "\n"
exit 0